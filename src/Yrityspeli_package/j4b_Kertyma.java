/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Yrityspeli_package;

import static Yrityspeli_package.j2a_Uusi_peli.jd;
import java.awt.Color;
import java.awt.Font;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.font.TextAttribute;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;

/**
 * @author Niko L. & Timo K. Dat16A
 * Ota yhteyttä jos tarvitset lisätietoja
 * brandis.palaute@gmail.com
 * Copyright ©Brandis, All rights reserved
 */
public class j4b_Kertyma extends javax.swing.JFrame {
    private String YRNIM;
    private int maxvuosi = 0;
    private int minpaiva = 2018;
    private int pvanum= 0;
    public j3_Paaikkuna j;
		private j4b_Kertyma ji;
    private Point compCoords;		
    
    /**
     * Creates new form j4e_Tilastot
     */
    public j4b_Kertyma() {
        initComponents();
    }
    j4b_Kertyma(String nimi) throws ClassNotFoundException, SQLException{
        initComponents();
        this.YRNIM= nimi;
        this.getContentPane().setBackground(Color.WHITE);
        paivita();
    }
     j4b_Kertyma(String nimi, j3_Paaikkuna aThis) throws ClassNotFoundException, SQLException{
        initComponents();
        this.YRNIM= nimi;
        this.j = aThis;
				 this.getRootPane().setBorder(BorderFactory.createLineBorder(new Color(12, 143, 222)));		
        this.getContentPane().setBackground(Color.WHITE);
        paivita();
				 this.ji = this;
					Palkki();
								
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OKBTN = new javax.swing.JButton();
        YlaPalkki = new javax.swing.JPanel();
        NYK = new javax.swing.JLabel();
        PVLB = new javax.swing.JLabel();
        ETEENPAINBTN = new javax.swing.JButton();
        TAKAISINBTN = new javax.swing.JButton();
        MATERIAALITJAPALVELUTLB = new javax.swing.JLabel();
        HENKILOSTOKULUTLB = new javax.swing.JLabel();
        MUUTKULUTLB = new javax.swing.JLabel();
        RAHOITUSKULUTLB = new javax.swing.JLabel();
        RAHOITUSKULUT = new javax.swing.JLabel();
        LIIKEVAIHTO = new javax.swing.JLabel();
        HENKILOSTOKULUT = new javax.swing.JLabel();
        MATERIAALITJAPALVELUT = new javax.swing.JLabel();
        MUUTKULUT = new javax.swing.JLabel();
        LIIKEVAIHTOLB = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TULOS = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(76, 181, 245));
        setMinimumSize(new java.awt.Dimension(522, 385));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(522, 380));
        setResizable(false);
        setSize(new java.awt.Dimension(522, 430));

        OKBTN.setBackground(new java.awt.Color(76, 181, 245));
        OKBTN.setText("OK");
        OKBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKBTNActionPerformed(evt);
            }
        });

        YlaPalkki.setBackground(new java.awt.Color(76, 181, 245));
        YlaPalkki.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                YlaPalkkiKeyPressed(evt);
            }
        });
        YlaPalkki.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        NYK.setForeground(new java.awt.Color(255, 255, 255));
        NYK.setText("Nykyinen vuosi");
        YlaPalkki.add(NYK, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 144, 18));

        PVLB.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        PVLB.setForeground(new java.awt.Color(255, 255, 255));
        PVLB.setText("2018");
        PVLB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        YlaPalkki.add(PVLB, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 130, 30));

        ETEENPAINBTN.setBackground(new java.awt.Color(255, 255, 255));
        ETEENPAINBTN.setText(">>");
        ETEENPAINBTN.setEnabled(false);
        ETEENPAINBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ETEENPAINBTNActionPerformed(evt);
            }
        });
        ETEENPAINBTN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ETEENPAINBTNKeyPressed(evt);
            }
        });
        YlaPalkki.add(ETEENPAINBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 0, 60, 60));

        TAKAISINBTN.setBackground(new java.awt.Color(255, 255, 255));
        TAKAISINBTN.setText("<<");
        TAKAISINBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TAKAISINBTNActionPerformed(evt);
            }
        });
        TAKAISINBTN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TAKAISINBTNKeyPressed(evt);
            }
        });
        YlaPalkki.add(TAKAISINBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 60, 60));

        MATERIAALITJAPALVELUTLB.setForeground(new java.awt.Color(0, 51, 255));
        MATERIAALITJAPALVELUTLB.setText("Materiaalit ja palvelut");
        MATERIAALITJAPALVELUTLB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Font font1 = MATERIAALITJAPALVELUTLB.getFont();
        Map attributes1 = font1.getAttributes();
        attributes1.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        MATERIAALITJAPALVELUTLB.setFont(font1.deriveFont(attributes1));
        MATERIAALITJAPALVELUTLB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MATERIAALITJAPALVELUTLBMousePressed(evt);
            }
        });

        HENKILOSTOKULUTLB.setForeground(new java.awt.Color(0, 51, 255));
        HENKILOSTOKULUTLB.setText("Henkilöstökulut");
        HENKILOSTOKULUTLB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Font font2 = HENKILOSTOKULUTLB.getFont();
        Map attributes2 = font2.getAttributes();
        attributes2.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        HENKILOSTOKULUTLB.setFont(font2.deriveFont(attributes2));
        HENKILOSTOKULUTLB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                HENKILOSTOKULUTLBMousePressed(evt);
            }
        });

        MUUTKULUTLB.setForeground(new java.awt.Color(0, 51, 255));
        MUUTKULUTLB.setText("Muut kulut");
        MUUTKULUTLB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Font font3 = MUUTKULUTLB.getFont();
        Map attributes3 = font3.getAttributes();
        attributes3.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        MUUTKULUTLB.setFont(font3.deriveFont(attributes3));
        MUUTKULUTLB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MUUTKULUTLBMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MUUTKULUTLBMouseReleased(evt);
            }
        });

        RAHOITUSKULUTLB.setForeground(new java.awt.Color(0, 51, 255));
        RAHOITUSKULUTLB.setText("Rahoituskulut");
        RAHOITUSKULUTLB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Font font4 = RAHOITUSKULUTLB.getFont();
        Map attributes4 = font4.getAttributes();
        attributes4.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        RAHOITUSKULUTLB.setFont(font4.deriveFont(attributes4));
        RAHOITUSKULUTLB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                RAHOITUSKULUTLBMousePressed(evt);
            }
        });

        RAHOITUSKULUT.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        LIIKEVAIHTO.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        HENKILOSTOKULUT.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        MATERIAALITJAPALVELUT.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        MUUTKULUT.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        LIIKEVAIHTOLB.setForeground(new java.awt.Color(0, 51, 255));
        LIIKEVAIHTOLB.setText("Liikevaihto");
        LIIKEVAIHTOLB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Font font = LIIKEVAIHTOLB.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        LIIKEVAIHTOLB.setFont(font.deriveFont(attributes));
        LIIKEVAIHTOLB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                LIIKEVAIHTOLBMousePressed(evt);
            }
        });

        TULOS.setEditable(false);
        TULOS.setColumns(20);
        TULOS.setRows(5);
        TULOS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TULOSKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(TULOS);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Vuoden kertymä");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel2.setText("Vuoden kertymä - Brandis© Yrityspelisimulaattori v1.0 ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(YlaPalkki, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(LIIKEVAIHTOLB)
                            .addComponent(MATERIAALITJAPALVELUTLB)
                            .addComponent(HENKILOSTOKULUTLB)
                            .addComponent(MUUTKULUTLB)
                            .addComponent(RAHOITUSKULUTLB))
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LIIKEVAIHTO, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MATERIAALITJAPALVELUT, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(HENKILOSTOKULUT, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MUUTKULUT, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RAHOITUSKULUT, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(106, 106, 106)
                        .addComponent(OKBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(YlaPalkki, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(15, 15, 15)
                        .addComponent(LIIKEVAIHTOLB)
                        .addGap(16, 16, 16)
                        .addComponent(MATERIAALITJAPALVELUTLB)
                        .addGap(16, 16, 16)
                        .addComponent(HENKILOSTOKULUTLB)
                        .addGap(16, 16, 16)
                        .addComponent(MUUTKULUTLB)
                        .addGap(16, 16, 16)
                        .addComponent(RAHOITUSKULUTLB))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(LIIKEVAIHTO, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(MATERIAALITJAPALVELUT, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(HENKILOSTOKULUT, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(MUUTKULUT, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(RAHOITUSKULUT, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2))
                    .addComponent(OKBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ETEENPAINBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ETEENPAINBTNActionPerformed
        try {
            pvanum =  Integer.parseInt(PVLB.getText());
            boolean max = false;
            if(pvanum == minpaiva){
               TAKAISINBTN.setEnabled(true);
            }
            pvanum = pvanum + 1;
            
            
            if(pvanum == maxvuosi){
                NYK.setText("Nykyinen vuosi");
		max = true;				  
                ETEENPAINBTN.setEnabled(false);
                haetamantiedot();
            }
            else{
                 NYK.setText("");
            }
            PVLB.setText(String.valueOf(pvanum));
            
            if(max == false){
            haetiedot();
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(j4b_Kertyma.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(j4b_Kertyma.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_ETEENPAINBTNActionPerformed

    private void TAKAISINBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TAKAISINBTNActionPerformed
        try {
            // TODO add your handling code here:
            pvanum = Integer.parseInt(PVLB.getText());
            if(pvanum == maxvuosi){
                ETEENPAINBTN.setEnabled(true);
            }
            pvanum = pvanum - 1;
            
            if(pvanum == 2018){
                TAKAISINBTN.setEnabled(false);
                NYK.setText("Aloitus vuosi");
            }
            else{
                 NYK.setText("");
            }
            PVLB.setText(String.valueOf(pvanum));
           
            haetiedot();
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(j4b_Kertyma.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(j4b_Kertyma.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_TAKAISINBTNActionPerformed

    private void OKBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKBTNActionPerformed
        // TODO add your handling code here:
				j.tilastotavattu = false;		
        this.dispose();
        j.setFrame();
					
        
        
    }//GEN-LAST:event_OKBTNActionPerformed

    private void YlaPalkkiKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_YlaPalkkiKeyPressed
          if(evt.getKeyCode() == (KeyEvent.VK_RIGHT)){
                   ETEENPAINBTN.doClick();
                }
                if(evt.getKeyCode() == (KeyEvent.VK_LEFT)){
                    TAKAISINBTN.doClick();
                }
    }//GEN-LAST:event_YlaPalkkiKeyPressed

    private void TULOSKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TULOSKeyPressed
        if(evt.getKeyCode() == (KeyEvent.VK_RIGHT)){
                   ETEENPAINBTN.doClick();
                }
                if(evt.getKeyCode() == (KeyEvent.VK_LEFT)){
                    TAKAISINBTN.doClick();
                }
    }//GEN-LAST:event_TULOSKeyPressed

    private void ETEENPAINBTNKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ETEENPAINBTNKeyPressed
if(evt.getKeyCode() == (KeyEvent.VK_RIGHT)){
                   ETEENPAINBTN.doClick();
                }
                if(evt.getKeyCode() == (KeyEvent.VK_LEFT)){
                    TAKAISINBTN.doClick();
                }        // TODO add your handling code here:
    }//GEN-LAST:event_ETEENPAINBTNKeyPressed

    private void TAKAISINBTNKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TAKAISINBTNKeyPressed
if(evt.getKeyCode() == (KeyEvent.VK_RIGHT)){
                   ETEENPAINBTN.doClick();
                }
                if(evt.getKeyCode() == (KeyEvent.VK_LEFT)){
                    TAKAISINBTN.doClick();
                }        // TODO add your handling code here:
    }//GEN-LAST:event_TAKAISINBTNKeyPressed

    private void LIIKEVAIHTOLBMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LIIKEVAIHTOLBMousePressed
        try {
            // TODO add your handling code here:
            Connection con = jd.getConnection();//Hakee yhteyden SQL-kantaan
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery("SELECT * FROM tilastot where yrnim='"+YRNIM+"'");
                int kk = 1;
                tiedonhaku:
                while(rs.next()){
                if(String.valueOf(rs.getDouble("paiva")).contains(PVLB.getText())){
                    kk++;
                }}
            int Tleipamyynti = 0;
            int Leleipamyynti = 0;
            int Luleipamyynti = 0;
            int Nakkimyynti = 0;
            int Thavikki = 0;
            int Lehavikki = 0;
            int Luhavikki = 0;
            TULOS.setText("--Liikevaihdon sisältö--");
            for (int i = 1; i < kk; i++) {
            StringBuilder sp = new StringBuilder();
            sp.append(i);
            sp.append(".");
            sp.append(PVLB.getText());
            rs = stm.executeQuery("SELECT * FROM TMtilastot where paiva = "+sp+" AND yrnim ='"+YRNIM+"' AND palkka = 0");
            while(rs.next()){
                if(rs.getDouble("ostohinta") > 0){
                    if(rs.getString("nimi").equals("Tehdasleipä")){
                        Tleipamyynti = Tleipamyynti + rs.getInt("myyntimaara");
                        Thavikki = rs.getInt("maara") - rs.getInt("myyntimaara");
                    }else if(rs.getString("nimi").equals("Leipomon leipä")){
                        Leleipamyynti = Leleipamyynti + rs.getInt("myyntimaara");
                        Lehavikki = rs.getInt("maara") - rs.getInt("myyntimaara");
                    }else if(rs.getString("nimi").equals("Luomuleipä")){
                        Luleipamyynti = Luleipamyynti + rs.getInt("myyntimaara");
                        Luhavikki = rs.getInt("maara") - rs.getInt("myyntimaara");
                    }else if(rs.getString("nimi").equals("Näkkileipä")){
                        Nakkimyynti = Nakkimyynti + rs.getInt("myyntimaara");
                    }
                }
            }}
            if(Tleipamyynti == 0 && Thavikki == 0){
                TULOS.append("\nEt myynyt yhtään tehdasleipää");
            }else{
                TULOS.append("\nMöit " +Tleipamyynti + " tehdasleipää vuoden aikana.");
                if(Thavikki == 0){
                    TULOS.append("\nIlman hävikkiä");
                }else{
                    TULOS.append("\nHävikkiä oli " +Thavikki +" kpl.");
                }
            }
            if(Leleipamyynti == 0 && Lehavikki == 0){
                TULOS.append("\nEt myynyt yhtään leipomon leipää");
            }else{
                TULOS.append("\nMöit " +Leleipamyynti + " leipomon leipää vuoden aikana.");
                if(Lehavikki == 0){
                    TULOS.append("\nIlman hävikkiä");
                }else{
                    TULOS.append("\nHävikkiä oli " +Lehavikki +" kpl.");
                }
            }
            if(Luleipamyynti == 0 && Luhavikki == 0){
                TULOS.append("\nEt myynyt yhtään luomuleipää");
            }else{
                TULOS.append("\nMöit " +Luleipamyynti + " luomuleipää vuoden aikana.");
                if(Luhavikki == 0){
                    TULOS.append("\nIlman hävikkiä");
                }else{
                    TULOS.append("\nHävikkiä oli " +Luhavikki +" kpl.");
                }
            }if(Nakkimyynti == 0){
                TULOS.append("\nEt myynyt yhtään Näkkileipää");
            }else{
                TULOS.append("\nMöit " +Nakkimyynti + " Näkkileipää vuoden aikana.");
            }
            TULOS.append("\n------------------");
            con.close();
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(j4b_Kertyma.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_LIIKEVAIHTOLBMousePressed

    private void MATERIAALITJAPALVELUTLBMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MATERIAALITJAPALVELUTLBMousePressed
        try {
            // TODO add your handling code here:
            Connection con = jd.getConnection();//Hakee yhteyden SQL-kantaan
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery("SELECT * FROM tilastot where yrnim='"+YRNIM+"'");
            int kk = 1;
            tiedonhaku:
            while(rs.next()){
                if(String.valueOf(rs.getDouble("paiva")).contains(PVLB.getText())){
                    kk++;
                }}
            int Tmaara = 0;
            int Lemaara = 0;
            int Lumaara = 0;
            int Nakkimaara = 0;
            double Tostohinta = 0;
            double Leostohinta = 0;
            double Luostohinta = 0;
            double Nakkihinta = 0;
            TULOS.setText("--Materiaalejen ja palveluiden sisältö--");
            for (int i = 1; i < kk; i++) {
                StringBuilder sp = new StringBuilder();
                sp.append(i);
                sp.append(".");
                sp.append(PVLB.getText());
                rs = stm.executeQuery("SELECT * FROM TMtilastot where paiva = "+sp+" AND yrnim ='"+YRNIM+"' AND palkka = 0");
                while(rs.next()){
                    if(rs.getDouble("ostohinta") > 0){
                        if(rs.getString("nimi").equals("Tehdasleipä")){
                            Tmaara = Tmaara + rs.getInt("maara");
                            Tostohinta = rs.getDouble("ostohinta");
                            Tostohinta = (double)Math.round(Tostohinta * 1000d) / 1000d;
                        }else if(rs.getString("nimi").equals("Leipomon leipä")){
                            Lemaara = Lemaara + rs.getInt("maara");
                            Leostohinta = rs.getDouble("ostohinta");
                            Leostohinta = (double)Math.round(Leostohinta * 1000d) / 1000d;
                        }else if(rs.getString("nimi").equals("Luomuleipä")){
                            Lumaara = Lumaara + rs.getInt("maara");
                            Luostohinta = rs.getDouble("ostohinta");
                            Luostohinta = (double)Math.round(Luostohinta * 1000d) / 1000d;
                        }else if(rs.getString("nimi").equals("Näkkileipä")){
                            Nakkimaara = Nakkimaara + rs.getInt("ostomaara");
                            Nakkihinta = rs.getDouble("ostohinta");
                            Nakkihinta = (double)Math.round(Nakkihinta * 1000d) / 1000d;
                        }
                    }
                }}
            if(Tmaara == 0 && Tostohinta == 0){
                TULOS.append("\nEt ostanut yhtään tehdasleipää");
            }else{
                TULOS.append("\nOstit " +Tmaara + " Tehdasleipää vuoden aikana.");
                TULOS.append("\nTuotteet maksoivat yhteensä " +j.roundaaS(Tostohinta * Tmaara) +"€.");
            }
            if(Lemaara == 0 && Leostohinta == 0){
                TULOS.append("\nEt ostanut yhtään leipomon leipää");
            }else{
                TULOS.append("\nOstit " +Lemaara + " leipomon leipää vuoden aikana.");
                TULOS.append("\nTuotteet maksoivat yhteensä " +j.roundaaS(Leostohinta * Lemaara) +"€.");
            }
            if(Lumaara == 0 && Luostohinta == 0){
                TULOS.append("\nEt ostanut yhtään luomuleipää");
            }else{
                TULOS.append("\nOstit " +Lumaara + " luomuleipää vuoden aikana.");
                TULOS.append("\nTuotteet maksoivat yhteensä " +j.roundaaS(Luostohinta * Lumaara) +"€.");
            }
            if(Nakkimaara == 0 && Nakkihinta == 0){
                TULOS.append("\nEt ostanut yhtään näkkileipää");
            }else{
                TULOS.append("\nOstit " +Nakkimaara + " näkkileipää vuoden aikana.");
                TULOS.append("\nTuotteet maksoivat yhteensä " +j.roundaaS(Nakkihinta * Nakkimaara) +"€.");
            }
            TULOS.append("\n------------------");
            con.close();
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(j4b_Kertyma.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_MATERIAALITJAPALVELUTLBMousePressed

    private void HENKILOSTOKULUTLBMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HENKILOSTOKULUTLBMousePressed
        try {
            // TODO add your handling code here:
            Connection con = jd.getConnection();//Hakee yhteyden SQL-kantaan
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery("SELECT * FROM tilastot where yrnim='"+YRNIM+"'");
            int kk = 1;
            tiedonhaku:
            while(rs.next()){
                if(String.valueOf(rs.getDouble("paiva")).contains(PVLB.getText())){
                    kk++;
                }}
            double Omistajanpalkka = 0;
            double Myyjienpalkka = 0;
            double palkkojensivukulut = 0;
            TULOS.setText("--Henkilöstökulujen sisältö--");
            for (int i = 1; i < kk; i++) {
                StringBuilder sp = new StringBuilder();
                sp.append(i);
                sp.append(".");
                sp.append(PVLB.getText());
                rs = stm.executeQuery("SELECT * FROM tilastot where paiva = "+sp+" AND yrnim ='"+YRNIM+"'");
                while(rs.next()){
                    Omistajanpalkka = Omistajanpalkka + rs.getDouble("omistajanpalkka");
                    palkkojensivukulut = palkkojensivukulut + rs.getDouble("palkkojensivukulut");
                }
                rs = stm.executeQuery("SELECT * FROM TMtilastot where paiva = "+sp+" AND yrnim ='"+YRNIM+"' AND ostohinta = 0");
                while(rs.next()){
                    if(rs.getDouble("ostohinta") == 0){
                        if(!rs.getString("nimi").equals("Omistaja")){
                        Myyjienpalkka = Myyjienpalkka + rs.getDouble("palkka");
                        }
                    }
                }}
            TULOS.append("\nOmistaja on ottanut palkkaa " +j.roundaaS(Omistajanpalkka) + "€.");
            TULOS.append("\nMyyjien palkat yhteensä: " +j.roundaaS(Myyjienpalkka)+ "€.");
            TULOS.append("\nPalkkojen sivukulut " + j.roundaaS(palkkojensivukulut)+ "€.");
            TULOS.append("\n------------------");
            con.close();
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(j4b_Kertyma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_HENKILOSTOKULUTLBMousePressed

    private void MUUTKULUTLBMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MUUTKULUTLBMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_MUUTKULUTLBMouseReleased

    private void MUUTKULUTLBMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MUUTKULUTLBMousePressed
        try {
            // TODO add your handling code here:
            Connection con = jd.getConnection();//Hakee yhteyden SQL-kantaan
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery("SELECT * FROM tilastot where yrnim='"+YRNIM+"'");
            int kk = 1;
            tiedonhaku:
            while(rs.next()){
                if(String.valueOf(rs.getDouble("paiva")).contains(PVLB.getText())){
                    kk++;
                }}
            double vesi = 0.0;
            double sahko = 0.0;
            double tietoliikenne = 0.0;
            double vuokra = 0.0;
            double kuljetus = 0.0;
            double huolto = 0.0;
            double taloushallinto = 0.0;
            double hyvantekevaisyys = 0.0;
            TULOS.setText("--Muitten kulujen sisältö--");
            for (int i = 1; i < kk; i++) {
                StringBuilder sp = new StringBuilder();
                sp.append(i);
                sp.append(".");
                sp.append(PVLB.getText());
                rs = stm.executeQuery("SELECT * FROM tilastot where paiva = "+sp+" AND yrnim ='"+YRNIM+"'");
                while(rs.next()){
                    vesi = vesi + rs.getDouble("vesi");
                    vesi = (double)Math.round(vesi * 1000d) / 1000d;
                    sahko = sahko +rs.getDouble("sahko");
                    sahko = (double)Math.round(sahko * 1000d) / 1000d;
                    tietoliikenne = tietoliikenne +rs.getDouble("tietoliikenne");
                    tietoliikenne = (double)Math.round(tietoliikenne * 1000d) / 1000d;
                    vuokra = vuokra +rs.getDouble("vuokra");
                    vuokra = (double)Math.round(vuokra * 1000d) / 1000d;
                    kuljetus = kuljetus + rs.getDouble("kuljetus");
                    kuljetus = (double)Math.round(kuljetus * 1000d) / 1000d;
                    huolto = huolto + rs.getDouble("huolto");
                    huolto = (double)Math.round(huolto * 1000d) / 1000d;
                    taloushallinto = taloushallinto + rs.getDouble("taloushallinto");
                    taloushallinto = (double)Math.round(taloushallinto * 1000d) / 1000d;
                    hyvantekevaisyys = hyvantekevaisyys + rs.getDouble("hyvantekevaisuus");
                    hyvantekevaisyys = (double)Math.round(hyvantekevaisyys * 1000d) / 1000d;
                }}
            TULOS.append("\nVeteen meni yhteensä " +j.roundaaS(vesi)+ "€.");
            TULOS.append("\nSähköön meni yhteensä " +j.roundaaS(sahko)+ "€.");
            TULOS.append("\nTietoliikenteeseen meni yhteensä " +j.roundaaS(tietoliikenne)+ "€.");
            TULOS.append("\nVuokraan meni yhteensä " +j.roundaaS(vuokra)+ "€.");
            TULOS.append("\nKuljetukseen meni yhteensä " +j.roundaaS(kuljetus)+ "€.");
            TULOS.append("\nHuoltoon meni yhteensä " +j.roundaaS(huolto)+ "€.");
            TULOS.append("\nTaloushallintoon meni yhteensä " +j.roundaaS(taloushallinto)+ "€.");
            TULOS.append("\nHyväntekeväisyyteen meni yhteensä " +j.roundaaS(hyvantekevaisyys)+ "€.");
            con.close();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(j4b_Kertyma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MUUTKULUTLBMousePressed

    private void RAHOITUSKULUTLBMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RAHOITUSKULUTLBMousePressed
        try {
            // TODO add your handling code here:
            Connection con = jd.getConnection();//Hakee yhteyden SQL-kantaan
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery("SELECT * FROM tilastot where yrnim='"+YRNIM+"'");
            int kk = 1;
            tiedonhaku:
            while(rs.next()){
                if(String.valueOf(rs.getDouble("paiva")).contains(PVLB.getText())){
                    kk++;
                }}
            double lainanmaksut = 0.0;
            TULOS.setText("--Rahoituskulujen sisältö--");
            for (int i = 1; i < kk; i++) {
                StringBuilder sp = new StringBuilder();
                sp.append(i);
                sp.append(".");
                sp.append(PVLB.getText());
                rs = stm.executeQuery("SELECT * FROM tilastot where paiva = "+sp+" AND yrnim ='"+YRNIM+"'");
                while(rs.next()){
                    lainanmaksut = lainanmaksut + rs.getDouble("lainanmaksut");
                    lainanmaksut = (double)Math.round(lainanmaksut * 1000d) / 1000d;
                }}
            TULOS.append("\nLainankorkoihin meni " +j.roundaaS(lainanmaksut)+ "€.");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(j4b_Kertyma.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(j4b_Kertyma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RAHOITUSKULUTLBMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
								
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(j4b_Kertyma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(j4b_Kertyma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(j4b_Kertyma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(j4b_Kertyma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new j4b_Kertyma().setVisible(true);
            }
        });
    }
    public void paivita() throws ClassNotFoundException, SQLException{
        Connection con = jd.getConnection();//Hakee yhteyden SQL-kantaan
        Statement stm = con.createStatement();
        int v = 0;
        System.out.println("YRITUKSAF" + YRNIM);
        ResultSet rs = stm.executeQuery("SELECT * FROM pelaajat where nimi='"+YRNIM+"'");
            while(rs.next()){
                v = rs.getInt("v");
            }
       
        PVLB.setText(String.valueOf(v));
        maxvuosi = v;
        if(PVLB.getText().equals("2018")){
                System.out.println("Takaisin nappi sammutettu");
                TAKAISINBTN.setEnabled(false);
        }
        else{
                System.out.println("Takaisin nappi käynnistetty");
                TAKAISINBTN.setEnabled(true);
                ETEENPAINBTN.setEnabled(false);
        }
        con.close();
        haetamantiedot();
    }
    
    public void haetiedot() throws ClassNotFoundException, SQLException{
                double liikevaihto = 0.0;
                double materiaalitjapalvelut = 0.0;
                double henkilostokulut = 0.0;
                double muutkulut  = 0.0;
                double rahoituskulut = 0.0;
                double myyjienpalkka = 0.0;
                double omistajanpalkka = 0.0;
                double hyvantekevaisyys = 0.0;
                Connection con = jd.getConnection();//Hakee yhteyden SQL-kantaan
                Statement stm = con.createStatement();
                ResultSet rs = stm.executeQuery("SELECT * FROM tilastot where yrnim='"+YRNIM+"'");
                int kk = 0;
                tiedonhaku:
                while(rs.next()){
                if(String.valueOf(rs.getDouble("paiva")).contains(PVLB.getText())){
                    liikevaihto = liikevaihto + rs.getDouble("tapahtunutmyynti");
                    liikevaihto = (double)Math.round(liikevaihto * 1000d) / 1000d;
                    System.out.println("LIIKEVAIHTO ON " + liikevaihto);
                    materiaalitjapalvelut = materiaalitjapalvelut + rs.getDouble("tuotteidenostohinta");
                    materiaalitjapalvelut = (double)Math.round(materiaalitjapalvelut * 1000d) / 1000d;
                    henkilostokulut = henkilostokulut + (rs.getDouble("myyjienpalkat") + rs.getDouble("palkkojensivukulut"));
                    henkilostokulut = (double)Math.round(henkilostokulut * 1000d) / 1000d;
                    muutkulut = muutkulut + (rs.getDouble("markkinointikulut") + rs.getDouble("vesi") + rs.getDouble("sahko") + rs.getDouble("tietoliikenne") + rs.getDouble("vuokra") +rs.getDouble("kuljetus") + rs.getDouble("huolto") + rs.getDouble("taloushallinto") + rs.getDouble("hyvantekevaisuus"));
                    muutkulut = (double)Math.round(muutkulut * 1000d) / 1000d;
                    rahoituskulut = rahoituskulut + rs.getDouble("lainanmaksut");
                    rahoituskulut = (double)Math.round(rahoituskulut * 1000d) / 1000d;
                
                
                    myyjienpalkka = myyjienpalkka + rs.getDouble("myyjienpalkat");
                    myyjienpalkka = (double)Math.round(myyjienpalkka * 1000d) / 1000d;
                    omistajanpalkka = omistajanpalkka + rs.getDouble("omistajanpalkka");
                    omistajanpalkka = (double)Math.round(omistajanpalkka * 1000d) / 1000d;
                    hyvantekevaisyys = hyvantekevaisyys + rs.getDouble("hyvantekevaisuus");
                    hyvantekevaisyys = (double)Math.round(hyvantekevaisyys * 1000d) / 1000d;
                    System.out.println("Kuukausia on " + kk);
                if(String.valueOf(rs.getDouble("paiva")).contains(PVLB.getText())){
                    kk++;
                }
                if(String.valueOf(rs.getDouble("paiva")).contains(PVLB.getText()) && kk == 12){
                    System.out.println("Lopetetaan tiedonhaku");
                    break tiedonhaku;
                }
                }}
                
                System.out.println("LIIKEVAIHTO ON LOPUSSA" + liikevaihto);
		LIIKEVAIHTO.setText(String.valueOf(j.roundaaS(liikevaihto)) +"€");
		MATERIAALITJAPALVELUT.setText(String.valueOf(j.roundaaS(materiaalitjapalvelut)) +"€");
		HENKILOSTOKULUT.setText(String.valueOf(j.roundaaS(henkilostokulut)) +"€");
		MUUTKULUT.setText(String.valueOf(j.roundaaS(muutkulut)) +"€");
		RAHOITUSKULUT.setText(String.valueOf(j.roundaaS(rahoituskulut)) +"€");
                TULOS.setText("--Vuoden Infoa--");
                double palkka = myyjienpalkka - omistajanpalkka;
                palkka = (double)Math.round(palkka * 1000d) / 1000d;
                TULOS.append("\nMyyjien palkat: " + j.roundaaS(palkka) +"€");
                TULOS.append("\nOmistajan palkka: "+ j.roundaaS(omistajanpalkka) +"€");
                TULOS.append("\nHyväntekeväisyys: "+ j.roundaaS(hyvantekevaisyys) +"€");
                
                con.close();
    }
     public void haetamantiedot() throws ClassNotFoundException, SQLException{
                double liikevaihto = 0.0;
                double materiaalitjapalvelut = 0.0;
                double henkilostokulut = 0.0;
                double muutkulut  = 0.0;
                double rahoituskulut = 0.0;
                int ostotkoostuvat = 0;
                Connection con = jd.getConnection();//Hakee yhteyden SQL-kantaan
                Statement stm = con.createStatement();
                ResultSet rs = stm.executeQuery("SELECT * FROM tilastot where yrnim='"+YRNIM+"'");
                int kk = 0;
                tiedonhaku:
                while(rs.next()){
                if(String.valueOf(rs.getDouble("paiva")).contains(String.valueOf(maxvuosi))){
                liikevaihto = liikevaihto + rs.getDouble("tapahtunutmyynti");
                liikevaihto = (double)Math.round(liikevaihto * 1000d) / 1000d;
                materiaalitjapalvelut = materiaalitjapalvelut + rs.getDouble("tuotteidenostohinta");
                materiaalitjapalvelut = (double)Math.round(materiaalitjapalvelut * 1000d) / 1000d;
                henkilostokulut = henkilostokulut + (rs.getDouble("myyjienpalkat") + rs.getDouble("palkkojensivukulut"));
                henkilostokulut = (double)Math.round(henkilostokulut * 1000d) / 1000d;
                muutkulut = muutkulut + (rs.getDouble("markkinointikulut") + rs.getDouble("vesi") + rs.getDouble("sahko") + rs.getDouble("tietoliikenne") + rs.getDouble("vuokra") +rs.getDouble("kuljetus") + rs.getDouble("huolto") + rs.getDouble("taloushallinto") + rs.getDouble("hyvantekevaisuus"));
                muutkulut = (double)Math.round(muutkulut * 1000d) / 1000d;
                rahoituskulut = rahoituskulut + rs.getDouble("lainanmaksut");
                rahoituskulut = (double)Math.round(rahoituskulut * 1000d) / 1000d;
                }
                if(String.valueOf(rs.getDouble("paiva")).contains(String.valueOf(maxvuosi))){
                    kk++;
                }
                if(String.valueOf(rs.getDouble("paiva")).contains(String.valueOf(maxvuosi)) && kk == 12){
                    break tiedonhaku;
                }}
                
		LIIKEVAIHTO.setText(String.valueOf(j.roundaaS(liikevaihto)) +"€");
		MATERIAALITJAPALVELUT.setText(String.valueOf(j.roundaaS(materiaalitjapalvelut)) +"€");
		HENKILOSTOKULUT.setText(String.valueOf(j.roundaaS(henkilostokulut)) +"€");
		MUUTKULUT.setText(String.valueOf(j.roundaaS(muutkulut)) +"€");
		RAHOITUSKULUT.setText(String.valueOf(j.roundaaS(rahoituskulut)) +"€");
                TULOS.setText("--Vuoden Infoa--");
                TULOS.append("\nTiedot tältä vuodelta");

            }
    
					private void Palkki() {    
    
         YlaPalkki.addMouseListener(new MouseListener() {
            
            @Override
            public void mouseReleased(MouseEvent e) {
                compCoords = null;
		ji.getRootPane().setBorder(BorderFactory.createLineBorder(new Color(12, 143, 222)));						
            }

           
            @Override
            public void mousePressed(MouseEvent e) {
                compCoords = e.getPoint();
                ji.getRootPane().setBorder(BorderFactory.createLineBorder(Color.ORANGE));
																
            }

           
            @Override
            public void mouseExited(MouseEvent e) {
            }

            
            @Override
            public void mouseEntered(MouseEvent e) {
            }

            
            @Override
            public void mouseClicked(MouseEvent e) {
            }
        });
       YlaPalkki.addMouseMotionListener(new MouseMotionListener() {
            @Override
            public void mouseMoved(MouseEvent e) {
            }

            @Override
            public void mouseDragged(MouseEvent e) {
                Point currCoords = e.getLocationOnScreen();
                ji.setLocation(currCoords.x - compCoords.x, currCoords.y - compCoords.y);
                
            }
        });
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ETEENPAINBTN;
    private javax.swing.JLabel HENKILOSTOKULUT;
    private javax.swing.JLabel HENKILOSTOKULUTLB;
    private javax.swing.JLabel LIIKEVAIHTO;
    private javax.swing.JLabel LIIKEVAIHTOLB;
    private javax.swing.JLabel MATERIAALITJAPALVELUT;
    private javax.swing.JLabel MATERIAALITJAPALVELUTLB;
    private javax.swing.JLabel MUUTKULUT;
    private javax.swing.JLabel MUUTKULUTLB;
    private javax.swing.JLabel NYK;
    private javax.swing.JButton OKBTN;
    private javax.swing.JLabel PVLB;
    private javax.swing.JLabel RAHOITUSKULUT;
    private javax.swing.JLabel RAHOITUSKULUTLB;
    public static javax.swing.JButton TAKAISINBTN;
    private javax.swing.JTextArea TULOS;
    private javax.swing.JPanel YlaPalkki;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
